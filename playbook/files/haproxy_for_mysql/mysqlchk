#!/bin/bash
#
# This script checks if a mysql server is healthy running on localhost. It will
# return:
# "HTTP/1.x 200 OK\r" (if mysql is running smoothly)
# - OR -
# "HTTP/1.x 500 Internal Server Error\r" (else)
#
# The purpose of this script is make haproxy capable of monitoring mysql properly
#

# Password file for MySQL
CREDENTIALS_FILE="/opt/.mysqlchk.cnf"
SLAVE_LAG_LIMIT=60
MYSQL_BIN=$(which mysql)
MYSQL_OPTS="--defaults-file=$CREDENTIALS_FILE -q -A --connect-timeout=10"
TMP_FILE="/dev/shm/mysqlchk.$$.out"
ERR_FILE="/dev/shm/mysqlchk.$$.err"
FORCE_FAIL="/dev/shm/proxyoff"
OPT_HTTP_STATUS=1
#
# The HTTP response. This will return a HTTP response with the provided HTTP
#   code and a descriptive message.
# Example:
#   http_response 301 "You accessed something that does not exist"
#   http_response 200 { "status": "success" }
#
http_response () {
    HTTP_CODE=$1
    MESSAGE=${2:-Message Undefined}
    length=${#MESSAGE}
  if [ $OPT_HTTP_STATUS -eq 1 ]; then
    if [ "$HTTP_CODE" -eq 503 ]; then
      echo -en "HTTP/1.1 503 Service Unavailable\r\n"
    elif [ "$HTTP_CODE" -eq 301 ]; then
      echo -en "HTTP/1.1 301 Not Found\r\n"
    elif [ "$HTTP_CODE" -eq 200 ]; then
      echo -en "HTTP/1.1 200 OK\r\n"
    else
      echo -en "HTTP/1.1 ${HTTP_CODE} UNKNOWN\r\n"
    fi
    echo -en "Content-Type: text/plain\r\n"
    echo -en "Connection: close\r\n"
    echo -en "Content-Length: ${length}\r\n"
    echo -en "\r\n"
    echo -en "$MESSAGE"
    echo -en "\r\n"
    sleep 0.1
    exit 0
  fi
}

preflight_check()
{
    for I in "$TMP_FILE" "$ERR_FILE"; do
        if [ -f "$I" ]; then
            if [ ! -w $I ]; then
                http_response 503 "Cannot write to $I"
            fi
        fi
    done
}

return_ok()
{
    if [ $role == "master" ]; then
        http_response 200 "MySQL master is running."
    elif [ $role == "slave" ]; then
        http_response 200 "MySQL slave is running. (Slave lag: $SLAVE_LAG)"
    else
        http_response 200 "MySQL is running."
    fi
}

return_fail()
{
  http_response 503 "MySQL is *down*."
}

preflight_check

if [ -f "$FORCE_FAIL" ]; then
        echo "$FORCE_FAIL found" > $ERR_FILE
        return_fail
fi

CMDLINE="$MYSQL_BIN $MYSQL_OPTS -e"
SLAVE_IO=$(${CMDLINE} 'SHOW SLAVE STATUS' --vertical 2>/dev/null | grep Slave_IO_Running |  tail -1 | awk {'print $2'})
SLAVE_SQL=$(${CMDLINE} 'SHOW SLAVE STATUS' --vertical 2>/dev/null | grep Slave_SQL_Running | head -1 | awk {'print $2'})

if [[ "${SLAVE_IO}" == "Yes" ]] && [[ "${SLAVE_SQL}" == "Yes" ]]; then
    role='slave'
    SLAVE_LAG=$(${CMDLINE} 'SHOW SLAVE STATUS' --vertical 2>/dev/null | grep Seconds_Behind_Master | tail -1 | awk {'print $2'})
    if [[ $SLAVE_LAG = 0 ]]; then
        return_ok
    elif [ $SLAVE_LAG -lt $SLAVE_LAG_LIMIT ] ; then
        return_ok
    fi
else
    role='master'
    READ_ONLY=$($CMDLINE 'SHOW GLOBAL VARIABLES LIKE "read_only"' --vertical 2>/dev/null | tail -1 | awk {'print $2'})
    [[ "${READ_ONLY}" == "OFF" ]] && return_ok
fi

return_fail
